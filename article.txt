Portfolio Project "Getting started with AWS"

Projekt ten opisuje mój proces nauki Amazon Web Services. Z założenia ma przedstawiać deployment oraz etapy przechodzenia z prostej strony internetowej, postawionej na pojedynczym serwerze EC2, na w pełni bezserwerową (serverless) aplikację internetową. Dodatkowo, po każdym etapie zawierającym większą zmianę w architekturze, zautomatyzuję proces deploymentu (Infrastructure as Code) z użyciem Terraform i przeanalizuję koszty z nią związane. Wraz z nabyciem umiejętności tworzenia automatyzacji wdrożę CI/CD pipeline za pomocą Jenkinsa w celu zautomatyzowania deploymentu i przeprowadzania automatycznych testów w momencie publikacji nowego kodu. Hostowaną stroną jest Fortune of the Day – ciastko z wróżbą. Początkowo strona ma wyświetlać inną wróżbę codziennie. Wraz z kolejnymi etapami rozwoju infrastruktury funkcjonalność strony będzie rozszerzana o nowe funkcje, takie jak możliwość dodawania własnych wróżb przez użytkowników.

Koncepty do nauki:
  -Web Server(NGINX)
  -IaC(Terraform)
  -CI/CD(Jenkins)
  -??Node.JS??
  -Ansible
  
Każdy etap zawiera:
  -Tytuł
  -Opis czynności i zmian
  -??kod??
  -??screen??
  -Sekcja napotkanych problemów oraz jak je rozwiązałem
  format sekcji problemów:
  
##Problemy##
   Problem:
     sample problem
   Rozwiązanie:
     sample problem solve
  
  -Sekcja Terraform
  -??screen Terraform??
  -Sekcja analizy kosztów



(1.) Web Hosting Basics	    #NGINX #SCP
 
 #Ten etap opisuje proces deploymentu i hostingu prostej statycznej strony
  (Pojedynczy plik html) z użyciem NGINX skonfigurowanym na EC2.
 
 #Kroki
  -Stworzenie free-tier instacji EC2, AMI = Amazon Linux 2 Ami,
   proste security group:
   SSH(port 22, z zezwoleniem połączenia(My IP)),
   HTTP(port 80, z  zezwoleniem 0.0.0.0/0(anywhere)).
   Domyślny VPC użyty jako tymczasowe ustawienia sieciowe.
  -Połączenie z instancją przy użyciu SSH.
  -Transfer pliku html z wzorem strony(tymczasowo bez żadnych funkcjonalności)
   na instacje EC2 z lokalnej maszyny za pomocą SCP(Secure Copy Protocol).
  -Konfiguracja serwera www NGINX i hosting bazowej strony.
  -Konfiguracja "backupu dysku", tworząc volume snapshot instacji.
 
 #Na tym etapie nie napotkałem większych problemów. Pora przejść do nauki
  Terraform i stworzyć całą infrastrukturę od nowa w formie kodu.
  
 #Terraform
  -Stworzenie użytkownika "TerraformUser" z odpowiednimi rolami(Pełen dostęp do: IAM, EC2, RDS itp)
   potrzebnymi do wykonywania specyficznych poleceń poprzez Terraform.
  -Zakodowanie wszystkich specyfikacji infrastuktury w pliku "main.tf".
  -Inicjacja Terraform.
  -Konfiguracja serwera Nginx za pomocą Ansible.


(2.) Autoscaling
 
 #Terraform
  -Zamiast konfigurować serwer z Ansible, Terraform tworzy S3 bucket z plikiem html,
   oraz rolę zezwalającą instancji na dostęp do S3.
  -VPC, Subnets, Route Table, Internet Gateway.  
  -Security Groups zezwalające na ruch http do instancji jedynie poprzez Load Balancer.
  -LB listener przekazujący ruch do Load Balancera, LB target group, Load Balancer.
  -ASG Launch template z konfigurującym instancję skryptem bash "user-data.sh",
   Auto Scaling Group.
  -Attachment łączący ze sobą ASG oraz LB. Instancje stworzone przez ASG będą częścią
   LB target group.

(3.) DynamoDB

  Na tym etapie	wprowadzę do infrastruktury DynamoDB nie relacyjną bazę danych
  ze względu ich prostotę. Przekształcę statyczną stronę na Pythonową aplikację
  w Flasku z ograniczoną ilością funkcji, aby zastosować CI/CD w aplikacji.
  Launch template bedzie posiadał 2 kontenery docker: jeden z aplikacją na serwerze wsgi "gunicorn"
  i jeden z serwerem webowym nginx jako reverse proxy. Przekierowuje zapytania dynamiczne do serwera wsgi
  i zajmie sie bezpośrednio plikami statycznymi co odciąży serwer wsgi ze względu na to że radzi sobie z nimi gorzej.
  przesył danych między nimi będzie możliwy dzięki docker compose.

  
   
    

#Flask app on docker on EC2
#basic funcionality - displaying random fortune every day / roll for other fortune
#Continue terraform course
#DynamoFB(secrets?)
#apply github actions ci/cd on above application








#Next steps
#Use EKS
